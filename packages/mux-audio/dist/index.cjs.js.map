{
  "version": 3,
  "sources": ["../src/index.ts", "../../../shared/polyfills/index.js", "../src/env.ts", "../src/CustomAudioElement.js"],
  "sourcesContent": ["import { globalThis } from 'shared-polyfills';\nimport {\n  initialize,\n  teardown,\n  generatePlayerInitTime,\n  MuxMediaProps,\n  StreamTypes,\n  PlaybackTypes,\n  ValueOf,\n  toMuxVideoURL,\n  Metadata,\n  MediaError,\n} from '@mux/playback-core';\nimport type { PlaybackCore, PlaybackEngine, Autoplay, ExtensionMimeTypeMap } from '@mux/playback-core';\nimport { getPlayerVersion } from './env';\n// this must be imported after playback-core for the polyfill to be included\nimport CustomAudioElement, { AudioEvents } from './CustomAudioElement';\n\n/** @TODO make the relationship between name+value smarter and more deriveable (CJP) */\ntype AttributeNames = {\n  ENV_KEY: 'env-key';\n  DEBUG: 'debug';\n  METADATA_URL: 'metadata-url';\n  BEACON_COLLECTION_DOMAIN: 'beacon-collection-domain';\n  DISABLE_COOKIES: 'disable-cookies';\n  PLAYBACK_ID: 'playback-id';\n  PREFER_PLAYBACK: 'prefer-playback';\n  TYPE: 'type';\n  STREAM_TYPE: 'stream-type';\n  START_TIME: 'start-time';\n};\n\nconst Attributes: AttributeNames = {\n  ENV_KEY: 'env-key',\n  DEBUG: 'debug',\n  PLAYBACK_ID: 'playback-id',\n  METADATA_URL: 'metadata-url',\n  PREFER_PLAYBACK: 'prefer-playback',\n  BEACON_COLLECTION_DOMAIN: 'beacon-collection-domain',\n  DISABLE_COOKIES: 'disable-cookies',\n  TYPE: 'type',\n  STREAM_TYPE: 'stream-type',\n  START_TIME: 'start-time',\n};\n\nconst AttributeNameValues = Object.values(Attributes);\n\nconst playerSoftwareVersion = getPlayerVersion();\nconst playerSoftwareName = 'mux-audio';\n\nclass MuxAudioElement extends CustomAudioElement<HTMLAudioElement> implements Partial<MuxMediaProps> {\n  static get observedAttributes() {\n    return [...AttributeNameValues, ...(CustomAudioElement.observedAttributes ?? [])];\n  }\n\n  #core?: PlaybackCore;\n  #loadRequested?: Promise<void> | null;\n  #playerInitTime: number;\n  #metadata: Readonly<Metadata> = {};\n\n  constructor() {\n    super();\n    this.#playerInitTime = generatePlayerInitTime();\n  }\n\n  get playerInitTime() {\n    return this.#playerInitTime;\n  }\n\n  get playerSoftwareName() {\n    return playerSoftwareName;\n  }\n\n  get playerSoftwareVersion() {\n    return playerSoftwareVersion;\n  }\n\n  // Keeping this named \"_hls\" since it's exposed for unadvertised \"advanced usage\" via getter that assumes specifically hls.js (CJP)\n  get _hls(): PlaybackEngine | undefined {\n    return this.#core?.engine;\n  }\n\n  get mux(): Readonly<HTMLAudioElement['mux']> | undefined {\n    return this.nativeEl.mux;\n  }\n\n  get src() {\n    // Use the attribute value as the source of truth.\n    // No need to store it in two places.\n    // This avoids needing a to read the attribute initially and update the src.\n    return this.getAttribute('src') as string;\n  }\n\n  set src(val: string) {\n    // If being set by attributeChangedCallback,\n    // dont' cause an infinite loop\n    if (val === this.src) return;\n\n    if (val == null) {\n      this.removeAttribute('src');\n    } else {\n      this.setAttribute('src', val);\n    }\n  }\n\n  get preload() {\n    const val = this.getAttribute('preload') as HTMLMediaElement['preload'];\n    if (val === '') return 'auto';\n    if (['none', 'metadata', 'auto'].includes(val)) return val;\n    return super.preload;\n  }\n\n  set preload(val) {\n    // don't cause an infinite loop\n    // check the attribute because an empty string maps to the `auto` prop\n    if (val == this.getAttribute('preload')) return;\n\n    if (['', 'none', 'metadata', 'auto'].includes(val)) {\n      this.setAttribute('preload', val);\n    } else {\n      this.removeAttribute('preload');\n    }\n  }\n\n  get debug(): boolean {\n    return this.getAttribute(Attributes.DEBUG) != null;\n  }\n\n  set debug(val: boolean) {\n    // dont' cause an infinite loop\n    if (val === this.debug) return;\n\n    if (val) {\n      this.setAttribute(Attributes.DEBUG, '');\n    } else {\n      this.removeAttribute(Attributes.DEBUG);\n    }\n  }\n\n  get disableCookies(): boolean {\n    return this.hasAttribute(Attributes.DISABLE_COOKIES);\n  }\n\n  set disableCookies(val: boolean) {\n    // dont' cause an infinite loop\n    if (val === this.disableCookies) return;\n\n    if (val) {\n      this.setAttribute(Attributes.DISABLE_COOKIES, '');\n    } else {\n      this.removeAttribute(Attributes.DISABLE_COOKIES);\n    }\n  }\n\n  get startTime(): number | undefined {\n    const val = this.getAttribute(Attributes.START_TIME);\n    if (val == null) return undefined;\n    const num = +val;\n    return !Number.isNaN(num) ? num : undefined;\n  }\n\n  set startTime(val: number | undefined) {\n    // dont' cause an infinite loop\n    if (val === this.startTime) return;\n\n    if (val == null) {\n      this.removeAttribute(Attributes.START_TIME);\n    } else {\n      this.setAttribute(Attributes.START_TIME, `${val}`);\n    }\n  }\n\n  get playbackId(): string | undefined {\n    return this.getAttribute(Attributes.PLAYBACK_ID) ?? undefined;\n  }\n\n  set playbackId(val: string | undefined) {\n    // dont' cause an infinite loop\n    if (val === this.playbackId) return;\n\n    if (val) {\n      this.setAttribute(Attributes.PLAYBACK_ID, val);\n    } else {\n      this.removeAttribute(Attributes.PLAYBACK_ID);\n    }\n  }\n\n  get envKey(): string | undefined {\n    return this.getAttribute(Attributes.ENV_KEY) ?? undefined;\n  }\n\n  set envKey(val: string | undefined) {\n    // dont' cause an infinite loop\n    if (val === this.envKey) return;\n\n    if (val) {\n      this.setAttribute(Attributes.ENV_KEY, val);\n    } else {\n      this.removeAttribute(Attributes.ENV_KEY);\n    }\n  }\n\n  get beaconCollectionDomain(): string | undefined {\n    return this.getAttribute(Attributes.BEACON_COLLECTION_DOMAIN) ?? undefined;\n  }\n\n  set beaconCollectionDomain(val: string | undefined) {\n    // dont' cause an infinite loop\n    if (val === this.beaconCollectionDomain) return;\n\n    if (val) {\n      this.setAttribute(Attributes.BEACON_COLLECTION_DOMAIN, val);\n    } else {\n      this.removeAttribute(Attributes.BEACON_COLLECTION_DOMAIN);\n    }\n  }\n\n  get streamType(): ValueOf<StreamTypes> | undefined {\n    // getAttribute doesn't know that this attribute is well defined. Should explore extending for MuxVideo (CJP)\n    return (this.getAttribute(Attributes.STREAM_TYPE) as ValueOf<StreamTypes>) ?? undefined;\n  }\n\n  set streamType(val: ValueOf<StreamTypes> | undefined) {\n    // dont' cause an infinite loop\n    if (val === this.streamType) return;\n\n    if (val) {\n      this.setAttribute(Attributes.STREAM_TYPE, val);\n    } else {\n      this.removeAttribute(Attributes.STREAM_TYPE);\n    }\n  }\n\n  get preferPlayback(): ValueOf<PlaybackTypes> | undefined {\n    const val = this.getAttribute(Attributes.PREFER_PLAYBACK);\n    if (val === PlaybackTypes.MSE || val === PlaybackTypes.NATIVE) return val;\n    return undefined;\n  }\n\n  set preferPlayback(val: ValueOf<PlaybackTypes> | undefined) {\n    if (val === this.preferPlayback) return;\n\n    if (val === PlaybackTypes.MSE || val === PlaybackTypes.NATIVE) {\n      this.setAttribute(Attributes.PREFER_PLAYBACK, val);\n    } else {\n      this.removeAttribute(Attributes.PREFER_PLAYBACK);\n    }\n  }\n\n  get metadata() {\n    const inferredMetadataAttrs: { [key: string]: string } = this.getAttributeNames()\n      .filter((attrName) => {\n        return attrName.startsWith('metadata-') && !([Attributes.METADATA_URL] as string[]).includes(attrName);\n      })\n      .reduce((currAttrs, attrName) => {\n        const value = this.getAttribute(attrName);\n        if (value != null) {\n          currAttrs[attrName.replace(/^metadata-/, '').replace(/-/g, '_') as string] = value;\n        }\n        return currAttrs;\n      }, {} as { [key: string]: string });\n\n    return {\n      ...inferredMetadataAttrs,\n      ...this.#metadata,\n    };\n  }\n\n  set metadata(val: Readonly<Metadata> | undefined) {\n    this.#metadata = val ?? {};\n    if (!!this.mux) {\n      /** @TODO Link to docs for a more detailed discussion (CJP) */\n      console.info(\n        'Some metadata values may not be overridable at this time. Make sure you set all metadata to override before setting the src.'\n      );\n      this.mux.emit('hb', this.#metadata);\n    }\n  }\n\n  async #requestLoad() {\n    if (this.#loadRequested) return;\n    await (this.#loadRequested = Promise.resolve());\n    this.#loadRequested = null;\n    this.load();\n  }\n\n  load() {\n    this.#core = initialize(this as Partial<MuxMediaProps>, this.nativeEl, this.#core);\n  }\n\n  unload() {\n    teardown(this.nativeEl, this.#core);\n    this.#core = undefined;\n  }\n\n  attributeChangedCallback(attrName: string, oldValue: string | null, newValue: string | null) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n\n    switch (attrName) {\n      case 'src': {\n        const hadSrc = !!oldValue;\n        const hasSrc = !!newValue;\n        if (!hadSrc && hasSrc) {\n          this.#requestLoad();\n        } else if (hadSrc && !hasSrc) {\n          this.unload();\n          /** @TODO Test this thoroughly (async?) and confirm unload() necessary (CJP) */\n        } else if (hadSrc && hasSrc) {\n          this.unload();\n          this.#requestLoad();\n        }\n        break;\n      }\n      case 'autoplay':\n        if (newValue === oldValue) {\n          break;\n        }\n        /** In case newValue is an empty string or null, use this.autoplay which translates to booleans (WL) */\n        this.#core?.setAutoplay(this.autoplay);\n        break;\n      case 'preload':\n        if (newValue === oldValue) {\n          break;\n        }\n        this.#core?.setPreload(newValue as HTMLMediaElement['preload']);\n        break;\n      case Attributes.PLAYBACK_ID:\n        /** @TODO Improv+Discuss - how should playback-id update wrt src attr changes (and vice versa) (CJP) */\n        this.src = toMuxVideoURL(newValue ?? undefined) as string;\n        break;\n      case Attributes.DEBUG: {\n        const debug = this.debug;\n        if (!!this.mux) {\n          /** @TODO Link to docs for a more detailed discussion (CJP) */\n          console.info(\n            'Cannot toggle debug mode of mux data after initialization. Make sure you set all metadata to override before setting the src.'\n          );\n        }\n        if (!!this._hls) {\n          this._hls.config.debug = debug;\n        }\n        break;\n      }\n      case Attributes.METADATA_URL:\n        if (newValue) {\n          fetch(newValue)\n            .then((resp) => resp.json())\n            .then((json) => (this.metadata = json))\n            .catch((_err) => console.error(`Unable to load or parse metadata JSON from metadata-url ${newValue}!`));\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  disconnectedCallback() {\n    this.unload();\n  }\n}\n\ntype MuxAudioElementType = typeof MuxAudioElement;\ndeclare global {\n  var MuxAudioElement: MuxAudioElementType; // eslint-disable-line\n}\n\nif (!globalThis.customElements.get('mux-audio')) {\n  globalThis.customElements.define('mux-audio', MuxAudioElement);\n  /** @TODO consider externalizing this (breaks standard modularity) */\n  globalThis.MuxAudioElement = MuxAudioElement;\n}\n\nexport { PlaybackEngine, PlaybackEngine as Hls, ExtensionMimeTypeMap as MimeTypes, MediaError, AudioEvents };\n\nexport default MuxAudioElement;\n", "class EventTarget {\n  addEventListener() {}\n  removeEventListener() {}\n  dispatchEvent(_event) {\n    return true;\n  }\n}\n\n// @github/template-parts requires DocumentFragment to be available on globalThis for SSR\nif (typeof DocumentFragment === 'undefined') {\n  class DocumentFragment extends EventTarget {}\n  // @ts-ignore\n  globalThis.DocumentFragment = DocumentFragment;\n}\n\nclass HTMLElement extends EventTarget {}\nclass HTMLVideoElement extends EventTarget {}\n\nconst customElements = {\n  get(_name) {\n    return undefined;\n  },\n  define(_name, _constructor, _options) {},\n  upgrade(_root) {},\n  whenDefined(_name) {\n    return Promise.resolve(HTMLElement);\n  },\n};\n\nclass CustomEvent {\n  #detail;\n  get detail() {\n    return this.#detail;\n  }\n  constructor(typeArg, eventInitDict = {}) {\n    // super(typeArg, eventInitDict);\n    this.#detail = eventInitDict?.detail;\n  }\n  initCustomEvent() {}\n}\n\nfunction createElement(_tagName, _options) {\n  return new HTMLElement();\n}\n\nconst globalThisShim = {\n  document: {\n    createElement,\n  },\n  DocumentFragment,\n  customElements,\n  CustomEvent,\n  EventTarget,\n  HTMLElement,\n  HTMLVideoElement,\n};\n\nconst isServer = typeof window === 'undefined' || typeof globalThis.customElements === 'undefined';\nconst GlobalThis = isServer ? globalThisShim : globalThis;\nconst Document = isServer ? globalThisShim.document : globalThis.document;\n\nexport { GlobalThis as globalThis, Document as document };\n", "export const isMaybeBrowser = () => typeof window != 'undefined';\n// @ts-ignore\nexport const isMaybeServer = () => typeof global != 'undefined';\n\nconst getEnvPlayerVersion = () => {\n  try {\n    // @ts-ignore\n    return PLAYER_VERSION as string;\n  } catch {}\n  return 'UNKNOWN';\n};\n\nconst player_version: string = getEnvPlayerVersion();\n\nexport const getPlayerVersion = () => player_version;\n", "import { globalThis, document } from 'shared-polyfills';\n/**\n * Custom Audio Element\n * The goal is to create an element that works just like the audio element\n * but can be extended/sub-classed, because native elements cannot be\n * extended today across browsers.\n */\n\nexport const AudioEvents = [\n  'abort',\n  'canplay',\n  'canplaythrough',\n  'durationchange',\n  'emptied',\n  'ended',\n  'error',\n  'loadeddata',\n  'loadedmetadata',\n  'loadstart',\n  'pause',\n  'play',\n  'playing',\n  'progress',\n  'ratechange',\n  'seeked',\n  'seeking',\n  'stalled',\n  'suspend',\n  'timeupdate',\n  'volumechange',\n  'waiting',\n];\n\nconst template = document.createElement('template');\n// Could you get styles to apply by passing a global button from global to shadow?\n\ntemplate.innerHTML = `\n<style>\n  :host {\n    /* display:inline (like the native el) makes it so you can't fill\n      the container with the native el */\n    display: inline-block;\n    box-sizing: border-box;\n\n    width: auto;\n    height: auto;\n  }\n\n  audio {\n    max-width: 100%;\n    max-height: 100%;\n    min-width: 100%;\n    min-height: 100%;\n  }\n\n</style>\n\n<audio part=\"audio\" crossorigin></audio>\n<slot></slot>\n`;\n\nclass CustomAudioElement extends globalThis.HTMLElement {\n  #isInit;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n\n    // If the custom element is defined before the <custom-video> HTML is parsed\n    // no attributes will be available in the constructor (construction process).\n    // Wait until initializing attributes in the attributeChangedCallback.\n    // If this element is connected to the DOM, the attributes will be available.\n    if (this.isConnected) {\n      this.#init();\n    }\n  }\n\n  #init() {\n    if (this.#isInit) return;\n    this.#isInit = true;\n\n    this.shadowRoot.append(template.content.cloneNode(true));\n    const nativeEl = (this.nativeEl = this.shadowRoot.querySelector('audio'));\n\n    // The audio events are dispatched on the CustomAudioElement instance.\n    // This makes it possible to add event listeners before the element is upgraded.\n    AudioEvents.forEach((type) => {\n      nativeEl.addEventListener(type, (evt) => {\n        this.dispatchEvent(new CustomEvent(evt.type, { detail: evt.detail }));\n      });\n    });\n\n    const slotEl = this.shadowRoot.querySelector('slot');\n    slotEl.addEventListener('slotchange', () => {\n      slotEl.assignedElements().forEach((el) => {\n        if (!['track', 'source'].includes(el.localName)) return;\n        nativeEl.append(el);\n      });\n    });\n\n    // Initialize all the attribute properties\n    // This is required before attributeChangedCallback is called after construction\n    // so the initial state of all the attributes are forwarded to the native element.\n    Array.from(this.attributes).forEach((attrNode) => {\n      this.forwardAttribute(attrNode.name, null, attrNode.value);\n    });\n\n    // Neither Chrome or Firefox support setting the muted attribute\n    // after using document.createElement.\n    // One way to get around this would be to build the native tag as a string.\n    // But just fixing it manually for now.\n    // Apparently this may also be an issue with <input checked> for buttons\n    if (nativeEl.defaultMuted) {\n      nativeEl.muted = true;\n    }\n  }\n\n  // observedAttributes is required to trigger attributeChangedCallback\n  // for any attributes on the custom element.\n  // Attributes need to be the lowercase word, e.g. crossorigin, not crossOrigin\n  static get observedAttributes() {\n    let attrs = [];\n\n    // Instead of manually creating a list of all observed attributes,\n    // observe any getter/setter prop name (lowercased)\n    Object.getOwnPropertyNames(this.prototype).forEach((propName) => {\n      let isFunc = false;\n\n      // Non-func properties throw errors because it's not an instance\n      try {\n        if (typeof this.prototype[propName] === 'function') {\n          isFunc = true;\n        }\n      } catch (e) {}\n\n      // Exclude functions and constants\n      if (!isFunc && propName !== propName.toUpperCase()) {\n        attrs.push(propName.toLowerCase());\n      }\n    });\n\n    // Include any attributes from the super class (recursive)\n    const supAttrs = Object.getPrototypeOf(this).observedAttributes;\n\n    if (supAttrs) {\n      attrs = attrs.concat(supAttrs);\n    }\n\n    return attrs;\n  }\n\n  // We need to handle sub-class custom attributes differently from\n  // attrs meant to be passed to the internal native el.\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    // Initialize right after construction when the attributes become available.\n    this.#init();\n\n    this.forwardAttribute(attrName, oldValue, newValue);\n  }\n\n  forwardAttribute(attrName, oldValue, newValue) {\n    // Find the matching prop for custom attributes\n    const ownProps = Object.getOwnPropertyNames(Object.getPrototypeOf(this));\n    const propName = arrayFindAnyCase(ownProps, attrName);\n\n    // Check if this is the original custom native elemnt or a subclass\n    const isBaseElement = Object.getPrototypeOf(this.constructor).toString().indexOf('function HTMLElement') === 0;\n\n    // If this is a subclass custom attribute we want to set the\n    // matching property on the subclass\n    if (propName && !isBaseElement) {\n      // Boolean props should never start as null\n      if (typeof this[propName] == 'boolean') {\n        // null is returned when attributes are removed i.e. boolean attrs\n        if (newValue === null) {\n          this[propName] = false;\n        } else {\n          // The new value might be an empty string, which is still true\n          // for boolean attributes\n          this[propName] = true;\n        }\n      } else {\n        this[propName] = newValue;\n      }\n    } else {\n      // When this is the original Custom Element, or the subclass doesn't\n      // have a matching prop, pass it through.\n      if (newValue === null) {\n        this.nativeEl.removeAttribute(attrName);\n      } else {\n        // Ignore a few that don't need to be passed through just in case\n        // it creates unexpected behavior.\n        if (['id', 'class'].indexOf(attrName) === -1) {\n          this.nativeEl.setAttribute(attrName, newValue);\n        }\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.#init();\n  }\n}\n\n// Map all native element properties to the custom element\n// so that they're applied to the native element.\n// Skipping HTMLElement because of things like \"attachShadow\"\n// causing issues. Most of those props still need to apply to\n// the custom element.\n// But includign EventTarget props because most events emit from\n// the native element.\nlet nativeElProps = [];\n\n// Can't check typeof directly on element prototypes without\n// throwing Illegal Invocation errors, so creating an element\n// to check on instead.\nconst nativeElTest = document.createElement('audio');\n\n// Deprecated props throw warnings if used, so exclude them\nconst deprecatedProps = ['webkitDisplayingFullscreen', 'webkitSupportsFullscreen'];\n\n// Walk the prototype chain up to HTMLElement.\n// This will grab all super class props in between.\n// i.e. AudioElement and MediaElement\nfor (\n  let proto = Object.getPrototypeOf(nativeElTest);\n  proto && proto !== globalThis.HTMLElement.prototype;\n  proto = Object.getPrototypeOf(proto)\n) {\n  Object.keys(proto).forEach((key) => {\n    if (deprecatedProps.indexOf(key) === -1) {\n      nativeElProps.push(key);\n    }\n  });\n}\n\n// Passthrough native el functions from the custom el to the native el\nnativeElProps.forEach((prop) => {\n  const type = typeof nativeElTest[prop];\n\n  if (type == 'function') {\n    // Function\n    CustomAudioElement.prototype[prop] = function () {\n      return this.nativeEl[prop].apply(this.nativeEl, arguments);\n    };\n  } else {\n    // Getter\n    let config = {\n      get() {\n        return this.nativeEl[prop];\n      },\n    };\n\n    if (prop !== prop.toUpperCase()) {\n      // Setter (not a CONSTANT)\n      config.set = function (val) {\n        this.nativeEl[prop] = val;\n      };\n    }\n\n    Object.defineProperty(CustomAudioElement.prototype, prop, config);\n  }\n});\n\nfunction arrayFindAnyCase(arr, word) {\n  let found = null;\n\n  arr.forEach((item) => {\n    if (item.toLowerCase() == word.toLowerCase()) {\n      found = item;\n    }\n  });\n\n  return found;\n}\n\nif (!globalThis.customElements.get('custom-audio')) {\n  globalThis.customElements.define('custom-audio', CustomAudioElement);\n  globalThis.CustomAudioElement = CustomAudioElement;\n}\n\nexport default CustomAudioElement;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "AudioEvents", "src_default", "__toCommonJS", "EventTarget", "_event", "DocumentFragment", "HTMLElement", "HTMLVideoElement", "customElements", "_name", "_constructor", "_options", "_root", "_detail", "CustomEvent", "typeArg", "eventInitDict", "__privateAdd", "__privateSet", "__privateGet", "createElement", "_tagName", "globalThisShim", "isServer", "GlobalThis", "Document", "import_playback_core", "getEnvPlayerVersion", "player_version", "getPlayerVersion", "AudioEvents", "template", "Document", "_isInit", "_init", "init_fn", "CustomAudioElement", "GlobalThis", "__privateAdd", "__privateMethod", "attrs", "propName", "isFunc", "supAttrs", "attrName", "oldValue", "newValue", "ownProps", "arrayFindAnyCase", "isBaseElement", "__privateGet", "__privateSet", "nativeEl", "type", "evt", "slotEl", "el", "attrNode", "nativeElProps", "nativeElTest", "deprecatedProps", "proto", "key", "prop", "config", "val", "arr", "word", "found", "item", "CustomAudioElement_default", "Attributes", "AttributeNameValues", "playerSoftwareVersion", "getPlayerVersion", "playerSoftwareName", "_core", "_loadRequested", "_playerInitTime", "_metadata", "_requestLoad", "requestLoad_fn", "MuxAudioElement", "CustomAudioElement_default", "__privateAdd", "__privateSet", "_a", "__privateGet", "val", "num", "attrName", "currAttrs", "value", "oldValue", "newValue", "_b", "hadSrc", "hasSrc", "__privateMethod", "debug", "resp", "json", "_err", "GlobalThis", "src_default", "MuxAudioElement"]
}
