{
  "version": 3,
  "sources": ["../src/index.ts", "../../../shared/polyfills/index.js", "../src/mux-uploader-drop.ts"],
  "sourcesContent": ["import { globalThis, document } from 'shared-polyfills';\n// Still need to import this to ensure component registration occurs when using the main module.\n// Consider refactoring module structure to avoid this. (CJP)\nimport './mux-uploader-drop';\nimport * as UpChunk from '@mux/upchunk';\n\nconst styles = `\n:host {\n  font-family: var(--uploader-font-family, Arial);\n  font-size: var(--uploader-font-size, 16px);\n  background-color: var(--uploader-background-color, inherit);\n}\n\n.sr-only {\n  position:absolute;\n  left:-10000px;\n  top:auto;\n  width:1px;\n  height:1px;\n  overflow:hidden;\n  }\n\np {\n  color: black;\n}\n\ninput[type=\"file\"] {\n  display: none;\n}\n\nbutton {\n  cursor: pointer;\n  line-height: 16px;\n  background: var(--button-background-color, #fff);\n  border: var(--button-border, 1px solid #000000);\n  color: #000000;\n  padding: var(--button-padding, 16px 24px);\n  border-radius: var(--button-border-radius, 4px);\n  -webkit-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n  font-family: inherit;\n  font-size: inherit;\n  position: relative;\n}\n\nbutton:hover {\n  color: var(--button-hover-text, #fff);\n  background: var(--button-hover-background, #404040);\n}\n\nbutton:active {\n  color: var(--button-active-text, #fff);\n  background: var(--button-active-background, #000000);\n}\n\n.bar-type {\n  background: #e6e6e6;\n  border-radius: 100px;\n  position: relative;\n  height: 4px;\n  width: 100%;\n}\n\n.radial-type, .bar-type, .upload-status, .retry-button, .text-container {\n  display: none;\n}\n\n::slotted(p) {\n  display: none;\n}\n\n.upload-instruction {\n  display: none;\n}\n\n.retry-button {\n  color: #e22c3e;\n  text-decoration-line: underline;\n  cursor: pointer;\n  position: relative;\n}\n\n.text-container {\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  padding-bottom: 16px;\n}\n\n:host([type=\"radial\"][upload-in-progress]) .radial-type {\n  display: block;\n}\n\n:host([type=\"bar\"][upload-in-progress]) .bar-type {\n  display: block;\n}\n\n:host([upload-in-progress][status]) .upload-status {\n  display: block;\n}\n\n:host([upload-in-progress]) ::slotted(p) {\n  display: block;\n}\n\n:host([type=\"bar\"][upload-error]) .progress-bar {\n  background: #e22c3e;\n}\n\n:host([type=\"bar\"][upload-error]) .status-message {\n  color: #e22c3e;\n}\n\n:host([type=\"radial\"][upload-error]) .status-message {\n  color: #e22c3e;\n}\n\n:host([upload-error][status]) .upload-status {\n  display: none;\n}\n\n:host([upload-error]) .retry-button {\n  display: inline-block;\n}\n\n:host([upload-error]) .text-container {\n  display: flex;\n}\n\n:host([upload-error]) ::slotted(p) {\n  display: none;\n}\n\n.upload-status {\n  font-size: inherit;\n  margin-bottom: 16px;\n}\n\n.progress-bar {\n  box-shadow: 0 10px 40px -10px #fff;\n  border-radius: 100px;\n  background: var(--progress-bar-fill-color, #000000);\n  height: 4px;\n  width: 0%;\n}\n\n:host([upload-in-progress]) button {\n  display: none;\n}\n\n:host([upload-in-progress]) ::slotted(button) {\n  display: none;\n}\n\n:host([upload-in-progress]) .upload-instruction {\n  display: none;\n}\n\ncircle {\n  stroke: var(--progress-radial-fill-color, black);\n  stroke-width: 6;  /* Thickness of the circle */\n  fill: transparent; /* Make inside of the circle see-through */\n\n  /* Animation */ \n  transition: 0.35s;\n  transform: rotate(-90deg);\n  transform-origin: 50% 50%;\n  -webkit-transform-origin: 50% 50%;\n  -moz-transform-origin: 50% 50%;\n}\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = `\n<style>\n  ${styles}\n</style>\n\n<div class=\"sr-only\" id=\"sr-only\" aria-live=\"polite\"></div>\n\n<div class=text-container>\n  <span class=\"status-message\" id=\"status-message\" role=\"status\" aria-live=\"polite\"></span>\n  <span class=\"retry-button\" id=\"retry-button\" role=\"button\" tabindex=\"0\">Try again</span>\n</div>\n\n<input id=\"hidden-file-input\" type=\"file\" />\n<slot name=\"upload-button\"><button type=\"button\">Upload video</button></slot>\n<p class=\"upload-status\" id=\"upload-status\"></p>\n\n<div class=\"bar-type\">\n  <div role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" class=\"progress-bar\" id=\"progress-bar\" tabindex=\"0\"></div>\n</div>\n<div class=\"radial-type\">\n  <svg\n    width=\"120\"\n    height=\"120\">\n    <!-- To prevent overflow of the SVG wrapper, radius must be  (svgWidth / 2) - (circleStrokeWidth * 2)\n      or use overflow: visible on the svg.-->\n    <circle\n      r=\"52\"\n      cx=\"60\"\n      cy=\"60\"\n    />\n  <svg>\n</div>\n`;\n\n// Note: Use \"bar\" for now since the CSS for radial is WIP. (TD).\nconst TYPES = {\n  BAR: 'bar',\n  RADIAL: 'radial',\n};\n\nconst defaultFormatProgress = (percent: number) => `${Math.floor(percent)}%`;\n\nconst getRadius = (el: MuxUploaderElement) => Number(el.svgCircle?.getAttribute('r'));\n\nconst getCircumference = (el: MuxUploaderElement) => getRadius(el) * 2 * Math.PI;\n\nconst ariaDescription = 'Media upload progress bar';\n\nconst ButtonPressedKeys = ['Enter', ' '];\n\ntype Endpoint = UpChunk.UpChunk['endpoint'] | undefined | null;\ntype DynamicChunkSize = UpChunk.UpChunk['dynamicChunkSize'] | undefined;\n\ntype ErrorDetail = {\n  message: string;\n  chunkNumber?: number;\n  attempts?: number;\n};\n\n// NOTE: Progress event is already determined on HTMLElement but have inconsistent types. Should consider renaming events (CJP)\nexport interface MuxUploaderElementEventMap extends Omit<HTMLElementEventMap, 'progress'> {\n  uploadstart: CustomEvent<{ file: File; chunkSize: number }>;\n  chunkattempt: CustomEvent<{\n    chunkNumber: number;\n    chunkSize: number;\n  }>;\n  chunksuccess: CustomEvent<{\n    chunk: number;\n    chunkSize: number;\n    attempts: number;\n    timeInterval: number;\n    // Note: This should be more explicitly typed in Upchunk. (TD).\n    response: any;\n  }>;\n  uploaderror: CustomEvent<ErrorDetail>;\n  progress: CustomEvent<number>;\n  success: CustomEvent<undefined | null>;\n}\n\ninterface MuxUploaderElement extends HTMLElement {\n  addEventListener<K extends keyof MuxUploaderElementEventMap>(\n    type: K,\n    listener: (this: HTMLMediaElement, ev: MuxUploaderElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener<K extends keyof MuxUploaderElementEventMap>(\n    type: K,\n    listener: (this: HTMLMediaElement, ev: MuxUploaderElementEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n}\n\nclass MuxUploaderElement extends globalThis.HTMLElement implements MuxUploaderElement {\n  protected _formatProgress: ((percent: number) => string) | null | undefined;\n  protected _filePickerButton: HTMLElement | null | undefined;\n  protected _endpoint: Endpoint;\n  svgCircle: SVGCircleElement | null | undefined;\n  progressBar: HTMLElement | null | undefined;\n  uploadPercentage: HTMLElement | null | undefined;\n  statusMessage: HTMLElement | null | undefined;\n  retryButton: HTMLElement | null | undefined;\n  srOnlyText: HTMLElement | null | undefined;\n\n  constructor() {\n    super();\n\n    // NOTE: Binding this so that we have a reference to remove the event listener\n    // but can still reference `this` in the method. (CJP)\n    this.handleFilePickerButtonClick = this.handleFilePickerButtonClick.bind(this);\n\n    const shadow = this.attachShadow({ mode: 'open' });\n    const uploaderHtml = template.content.cloneNode(true);\n    shadow.appendChild(uploaderHtml);\n\n    // Since we have a \"default slotted\" element, we still need to initialize the slottable elements\n    // (Note the difference in selectors and related code in 'slotchange' handler, below)\n    this.filePickerButton = this.shadowRoot?.querySelector('slot[name=upload-button] > *');\n    this.svgCircle = this.shadowRoot?.querySelector('circle');\n    this.progressBar = this.shadowRoot?.getElementById('progress-bar');\n    this.uploadPercentage = this.shadowRoot?.getElementById('upload-status');\n    this.statusMessage = this.shadowRoot?.getElementById('status-message');\n    this.retryButton = this.shadowRoot?.getElementById('retry-button');\n    this.srOnlyText = this.shadowRoot?.getElementById('sr-only');\n\n    this.progressBar?.setAttribute('aria-description', ariaDescription);\n\n    // These should only ever be setup once on instantiation/construction.\n    this.hiddenFileInput?.addEventListener('change', () => {\n      const file = this.hiddenFileInput?.files?.[0];\n\n      if (file) {\n        this.dispatchEvent(\n          new CustomEvent('file-ready', {\n            composed: true,\n            bubbles: true,\n            detail: file,\n          })\n        );\n      }\n    });\n    this.shadowRoot?.querySelector('slot[name=upload-button]')?.addEventListener('slotchange', () => {\n      this.filePickerButton = (\n        this.shadowRoot?.querySelector('slot[name=upload-button]') as HTMLSlotElement\n      )?.assignedNodes()[0] as HTMLButtonElement;\n    });\n  }\n\n  connectedCallback() {\n    this.setDefaultType();\n    this.setupRetry();\n    //@ts-ignore\n    this.addEventListener('file-ready', this.handleUpload);\n  }\n\n  disconnectedCallback() {\n    //@ts-ignore\n    this.removeEventListener('file-ready', this.handleUpload, false);\n  }\n\n  protected get filePickerButton() {\n    return this._filePickerButton;\n  }\n\n  protected set filePickerButton(value: HTMLElement | null | undefined) {\n    if (value === this._filePickerButton) return;\n    if (this._filePickerButton) {\n      this._filePickerButton.removeEventListener('click', this.handleFilePickerButtonClick);\n    }\n    this._filePickerButton = value;\n    if (this._filePickerButton) {\n      this._filePickerButton.addEventListener('click', this.handleFilePickerButtonClick);\n    }\n  }\n\n  protected get hiddenFileInput() {\n    return this.shadowRoot?.querySelector('#hidden-file-input') as HTMLInputElement;\n  }\n\n  handleFilePickerButtonClick() {\n    // TO-DO: Allow user to reattempt uploading the same file after an error.\n    // Note: Apparently Chrome and Firefox do not allow changing an indexed property on FileList...(TD).\n    // Source: https://stackoverflow.com/a/46689013\n    this.hiddenFileInput.click();\n  }\n\n  get endpoint(): Endpoint {\n    return this.getAttribute('endpoint') ?? this._endpoint;\n  }\n\n  set endpoint(value: Endpoint) {\n    if (value === this.endpoint) return;\n    if (typeof value === 'string') {\n      this.setAttribute('endpoint', value);\n    } else if (value == undefined) {\n      this.removeAttribute('endpoint');\n    }\n    this._endpoint = value;\n  }\n\n  get dynamicChunkSize(): DynamicChunkSize {\n    return this.hasAttribute('dynamic-chunk-size');\n  }\n\n  set dynamicChunkSize(value: DynamicChunkSize) {\n    if (value === this.hasAttribute('dynamic-chunk-size')) return;\n    if (value) {\n      this.setAttribute('dynamic-chunk-size', '');\n    } else {\n      this.removeAttribute('dynamic-chunk-size');\n    }\n  }\n\n  get formatProgress(): (percent: number) => string {\n    return this._formatProgress ?? defaultFormatProgress;\n  }\n\n  set formatProgress(value: ((percent: number) => string) | null | undefined) {\n    this._formatProgress = value;\n  }\n\n  setDefaultType() {\n    const currentType = this.getAttribute('type');\n\n    if (!currentType) {\n      this.setAttribute('type', TYPES.BAR);\n    }\n\n    if (currentType === TYPES.RADIAL) {\n      if (this.svgCircle) {\n        // strokeDasharray is the size of dashes used to draw the circle with the size of gaps in between.\n        // If the dash number is the same as the gap number, no gap is visible: a full circle.\n        // strokeDashoffset defines where along our circle the dashes (in our case, a dash as long as the\n        // circumference of our circle) begins. The larger the offset, the farther into the circle you're\n        // starting the \"dash\". In the beginning, offset is the same as the circumference. Meaning, the visible\n        // dash starts at the end so we don't see the full circle. Instead we see a gap the size of the circle.\n        // When the percentage is 100%, offset is 0 meaning the dash starts at the beginning so we can see the circle. (TD).\n        this.svgCircle.style.strokeDasharray = `${getCircumference(this)} ${getCircumference(this)}`;\n        this.svgCircle.style.strokeDashoffset = `${getCircumference(this)}`;\n      }\n    }\n  }\n\n  setupRetry() {\n    this.retryButton?.addEventListener('click', () => {\n      this.resetState();\n    });\n\n    // NOTE: There are definitely some \"false positive\" cases with multi-key pressing,\n    // but this should be good enough for most use cases.\n    const keyUpHandler = (e: KeyboardEvent) => {\n      const { key } = e;\n      if (!ButtonPressedKeys.includes(key)) {\n        this.removeEventListener('keyup', keyUpHandler);\n        return;\n      }\n\n      this.resetState();\n    };\n\n    this.addEventListener('keydown', (e) => {\n      const { metaKey, altKey, key } = e;\n      if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {\n        this.removeEventListener('keyup', keyUpHandler);\n        return;\n      }\n      this.addEventListener('keyup', keyUpHandler);\n    });\n  }\n\n  resetState() {\n    this.removeAttribute('upload-error');\n    this.removeAttribute('upload-in-progress');\n    // Reset file to ensure change/input events will fire, even if selecting the same file (CJP).\n    this.hiddenFileInput.value = '';\n    if (this.statusMessage) this.statusMessage.innerHTML = '';\n    if (this.uploadPercentage) this.uploadPercentage.innerHTML = '';\n  }\n\n  setProgress(percent: number) {\n    if (this.uploadPercentage) this.uploadPercentage.innerHTML = this.formatProgress(percent);\n    this.progressBar?.setAttribute('aria-valuenow', `${Math.floor(percent)}`);\n\n    switch (this.getAttribute('type')) {\n      case TYPES.BAR: {\n        if (this.progressBar) this.progressBar.style.width = `${percent}%`;\n        break;\n      }\n      case TYPES.RADIAL: {\n        if (this.svgCircle) {\n          // The closer the upload percentage gets to 100%, the closer offset gets to 0.\n          // The closer offset gets to 0, the more we can see the circumference of our circle. (TD).\n          const offset = getCircumference(this) - (percent / 100) * getCircumference(this);\n\n          this.svgCircle.style.strokeDashoffset = offset.toString();\n        }\n      }\n    }\n  }\n\n  handleUpload(evt: CustomEvent) {\n    const endpoint = this.endpoint;\n    const dynamicChunkSize = this.dynamicChunkSize;\n\n    if (!endpoint) {\n      const invalidUrlMessage = 'No url or endpoint specified -- cannot handleUpload';\n      if (this.statusMessage) {\n        this.statusMessage.innerHTML = invalidUrlMessage;\n      }\n      this.setAttribute('upload-error', '');\n      console.error(invalidUrlMessage);\n      this.dispatchEvent(new CustomEvent('uploaderror', { detail: { message: invalidUrlMessage } }));\n      // Bail early if no endpoint.\n      return;\n    } else {\n      this.removeAttribute('upload-error');\n      if (this.statusMessage) {\n        this.statusMessage.innerHTML = '';\n      }\n    }\n\n    this.setAttribute('upload-in-progress', '');\n    this.progressBar?.focus();\n\n    const upload = UpChunk.createUpload({\n      endpoint,\n      dynamicChunkSize,\n      file: evt.detail,\n    });\n\n    this.dispatchEvent(new CustomEvent('uploadstart', { detail: { file: upload.file, chunkSize: upload.chunkSize } }));\n\n    upload.on('attempt', (event) => {\n      this.dispatchEvent(new CustomEvent('chunkattempt', event));\n    });\n\n    upload.on('chunkSuccess', (event) => {\n      this.dispatchEvent(new CustomEvent('chunksuccess', event));\n    });\n\n    upload.on('error', (event) => {\n      const errorMessage = 'An error has occurred';\n\n      this.setAttribute('upload-error', '');\n\n      if (this.statusMessage) {\n        this.statusMessage.innerHTML = errorMessage;\n      }\n\n      console.error(event.detail.message);\n      this.dispatchEvent(new CustomEvent('uploaderror', event));\n    });\n\n    upload.on('progress', (event) => {\n      this.setProgress(event.detail);\n      this.dispatchEvent(new CustomEvent('progress', event));\n    });\n\n    upload.on('success', (event) => {\n      const successMessage = 'Upload complete!';\n\n      if (this.statusMessage) {\n        this.statusMessage.innerHTML = successMessage;\n      }\n\n      // TO-DO: It seems like statusMessage cannot be updated within two different events. (TD).\n      // Timing? Need to look into this...\n      if (this.srOnlyText) {\n        this.srOnlyText.innerHTML = successMessage;\n      }\n\n      console.info(successMessage);\n      this.dispatchEvent(new CustomEvent('success', event));\n    });\n  }\n}\n\ntype MuxUploaderElementType = typeof MuxUploaderElement;\ndeclare global {\n  // eslint-disable-next-line\n  var MuxUploaderElement: MuxUploaderElementType;\n}\n\n/** @TODO Refactor once using `globalThis` polyfills */\nif (!globalThis.customElements.get('mux-uploader')) {\n  globalThis.customElements.define('mux-uploader', MuxUploaderElement);\n  /** @TODO consider externalizing this (breaks standard modularity) */\n  globalThis.MuxUploaderElement = MuxUploaderElement;\n}\n\nexport default MuxUploaderElement;\n", "class EventTarget {\n  addEventListener() {}\n  removeEventListener() {}\n  dispatchEvent(_event) {\n    return true;\n  }\n}\n\n// @github/template-parts requires DocumentFragment to be available on globalThis for SSR\nif (typeof DocumentFragment === 'undefined') {\n  class DocumentFragment extends EventTarget {}\n  // @ts-ignore\n  globalThis.DocumentFragment = DocumentFragment;\n}\n\nclass HTMLElement extends EventTarget {}\nclass HTMLVideoElement extends EventTarget {}\n\nconst customElements = {\n  get(_name) {\n    return undefined;\n  },\n  define(_name, _constructor, _options) {},\n  upgrade(_root) {},\n  whenDefined(_name) {\n    return Promise.resolve(HTMLElement);\n  },\n};\n\nclass CustomEvent {\n  #detail;\n  get detail() {\n    return this.#detail;\n  }\n  constructor(typeArg, eventInitDict = {}) {\n    // super(typeArg, eventInitDict);\n    this.#detail = eventInitDict?.detail;\n  }\n  initCustomEvent() {}\n}\n\nfunction createElement(_tagName, _options) {\n  return new HTMLElement();\n}\n\nconst globalThisShim = {\n  document: {\n    createElement,\n  },\n  DocumentFragment,\n  customElements,\n  CustomEvent,\n  EventTarget,\n  HTMLElement,\n  HTMLVideoElement,\n};\n\nconst isServer = typeof window === 'undefined' || typeof globalThis.customElements === 'undefined';\nconst GlobalThis = isServer ? globalThisShim : globalThis;\nconst Document = isServer ? globalThisShim.document : globalThis.document;\n\nexport { GlobalThis as globalThis, Document as document };\n", "import { globalThis, document } from 'shared-polyfills';\n\nconst template = document.createElement('template');\n\n/** @todo: Currently removing all styles. Follow up on overlay styling (CJP) */\ntemplate.innerHTML = `\n<style>\n  :host {\n    position: relative;\n  }\n\n  #overlay {\n    display: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  :host([active][overlay]) > #overlay {\n    background: var(--overlay-background-color, rgba(226, 253, 255, 0.95));\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n</style>\n\n<slot></slot>\n<div id=\"overlay\">\n  <h1 id=\"overlay-label\"></h1>\n</div>\n`;\n\nconst Attributes = {\n  MUX_UPLOADER: 'mux-uploader',\n  OVERLAY_TEXT: 'overlay-text',\n};\n\nclass MuxUploaderDropElement extends globalThis.HTMLElement {\n  overlayText: HTMLElement;\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(template.content.cloneNode(true));\n\n    this.overlayText = shadowRoot.getElementById('overlay-label') as HTMLElement;\n  }\n\n  connectedCallback() {\n    this.setupDragEvents();\n  }\n\n  attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\n    if (attributeName === Attributes.OVERLAY_TEXT && oldValue !== newValue) {\n      this.overlayText.innerHTML = newValue ?? '';\n    } else if (attributeName === 'active') {\n      if (this.getAttribute('overlay') && newValue != null) {\n        this._currentDragTarget = this;\n      }\n    }\n  }\n\n  static get observedAttributes() {\n    return [Attributes.OVERLAY_TEXT, Attributes.MUX_UPLOADER, 'active'];\n  }\n\n  get muxUploader() {\n    const uploaderId = this.getAttribute(Attributes.MUX_UPLOADER);\n    return uploaderId ? document.getElementById(uploaderId) : null;\n  }\n\n  protected _currentDragTarget?: Node;\n\n  setupDragEvents() {\n    this.addEventListener('dragenter', (evt) => {\n      this._currentDragTarget = evt.target as Node;\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.setAttribute('active', '');\n    });\n\n    this.addEventListener('dragleave', (evt) => {\n      if (this._currentDragTarget === evt.target) {\n        this._currentDragTarget = undefined;\n        this.removeAttribute('active');\n      }\n    });\n\n    this.addEventListener('dragover', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n    });\n\n    this.addEventListener('drop', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      const { dataTransfer } = evt;\n      //@ts-ignore\n      const { files } = dataTransfer;\n      const file = files[0];\n\n      const uploaderController = this.muxUploader ?? this;\n\n      uploaderController.dispatchEvent(\n        new CustomEvent('file-ready', {\n          composed: true,\n          bubbles: true,\n          detail: file,\n        })\n      );\n\n      this.removeAttribute('active');\n    });\n  }\n}\n\nif (!globalThis.customElements.get('mux-uploader-drop')) {\n  globalThis.customElements.define('mux-uploader-drop', MuxUploaderDropElement);\n  //@ts-ignore\n  globalThis.MuxUploaderDropElement = MuxUploaderDropElement;\n}\n\nexport default MuxUploaderDropElement;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "src_default", "__toCommonJS", "EventTarget", "_event", "DocumentFragment", "HTMLElement", "HTMLVideoElement", "customElements", "_name", "_constructor", "_options", "_root", "_detail", "CustomEvent", "typeArg", "eventInitDict", "__privateAdd", "__privateSet", "__privateGet", "createElement", "_tagName", "globalThisShim", "isServer", "GlobalThis", "Document", "template", "Document", "Attributes", "MuxUploaderDropElement", "GlobalThis", "shadowRoot", "attributeName", "oldValue", "newValue", "uploaderId", "evt", "_a", "dataTransfer", "files", "file", "UpChunk", "styles", "template", "Document", "TYPES", "defaultFormatProgress", "percent", "getRadius", "el", "_a", "getCircumference", "ariaDescription", "ButtonPressedKeys", "MuxUploaderElement", "GlobalThis", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "shadow", "uploaderHtml", "file", "value", "currentType", "keyUpHandler", "e", "key", "metaKey", "altKey", "offset", "evt", "endpoint", "dynamicChunkSize", "invalidUrlMessage", "upload", "event", "errorMessage", "successMessage", "src_default"]
}
