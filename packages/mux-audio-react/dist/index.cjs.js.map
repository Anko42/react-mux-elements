{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/use-combined-refs.ts", "../src/env.ts"],
  "sourcesContent": ["import { useCombinedRefs } from './use-combined-refs';\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  allMediaTypes,\n  initialize,\n  MuxMediaProps,\n  StreamTypes,\n  PlaybackTypes,\n  toMuxVideoURL,\n  generatePlayerInitTime,\n} from '@mux/playback-core';\nimport type { PlaybackCore } from '@mux/playback-core';\nimport { getPlayerVersion } from './env';\n\nexport type Props = Omit<\n  React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>,\n  'autoPlay'\n> &\n  MuxMediaProps;\n\nconst playerSoftwareVersion = getPlayerVersion();\nconst playerSoftwareName = 'mux-audio-react';\n\nconst MuxAudio = React.forwardRef<HTMLAudioElement | undefined, Partial<Props>>((props, ref) => {\n  const {\n    envKey,\n    debug,\n    beaconCollectionDomain,\n    playbackId,\n    preferPlayback,\n    type,\n    streamType,\n    startTime,\n    src: outerSrc,\n    children,\n    autoPlay,\n    preload,\n    ...restProps\n  } = props;\n\n  const [playerInitTime] = useState(generatePlayerInitTime());\n  const [src, setSrc] = useState<MuxMediaProps['src']>(toMuxVideoURL(playbackId) ?? outerSrc);\n  const playbackCoreRef = useRef<PlaybackCore | undefined>(undefined);\n  const innerMediaElRef = useRef<HTMLAudioElement>(null);\n  const mediaElRef = useCombinedRefs(innerMediaElRef, ref);\n\n  useEffect(() => {\n    setSrc(toMuxVideoURL(playbackId) ?? outerSrc);\n  }, [outerSrc, playbackId]);\n\n  useEffect(() => {\n    const propsWithState = {\n      ...props,\n      src,\n      playerInitTime,\n      playerSoftwareName,\n      playerSoftwareVersion,\n      autoplay: autoPlay,\n    };\n    if (mediaElRef.current) {\n      playbackCoreRef.current = initialize(propsWithState, mediaElRef.current, playbackCoreRef.current);\n    }\n  }, [src]);\n\n  useEffect(() => {\n    playbackCoreRef.current?.setAutoplay(autoPlay);\n  }, [autoPlay]);\n\n  useEffect(() => {\n    playbackCoreRef.current?.setPreload(preload);\n  }, [preload]);\n\n  return (\n    /** @TODO Fix types relationships (CJP) */\n    <audio ref={mediaElRef as typeof innerMediaElRef} {...restProps}>\n      {children}\n    </audio>\n  );\n});\n\nMuxAudio.propTypes = {\n  envKey: PropTypes.string,\n  debug: PropTypes.bool,\n  disableCookies: PropTypes.bool,\n  // Improve this by adding a full shape() definition for all metadata props\n  // metadata: PropTypes.shape({}),\n  metadata: PropTypes.any,\n  beaconCollectionDomain: PropTypes.string,\n  playbackId: PropTypes.string,\n  playerInitTime: PropTypes.number,\n  preferPlayback: PropTypes.oneOf(Object.values(PlaybackTypes)),\n  type: PropTypes.oneOf(allMediaTypes),\n  streamType: PropTypes.oneOf(Object.values(StreamTypes)),\n  startTime: PropTypes.number,\n};\n\nexport default MuxAudio;\n", "import { useEffect, useRef, MutableRefObject } from 'react';\n\ntype Maybe<T> = T | null | undefined;\ntype RefCb<T> = (instance: Maybe<T>) => void;\ntype RefObj<T> = MutableRefObject<Maybe<T>>;\ntype RefTypes<T> = RefObj<T> | RefCb<T>;\ninterface useCombinedRefs {\n  <T>(...refs: Maybe<RefTypes<T>>[]): RefObj<T>;\n}\n\nexport const useCombinedRefs: useCombinedRefs = (...refs) => {\n  const targetRef = useRef(null);\n\n  useEffect(() => {\n    refs.forEach((ref) => {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(targetRef.current);\n      } else {\n        ref.current = targetRef.current;\n      }\n    });\n  }, [refs]);\n\n  return targetRef;\n};\n\n// TS assumed default export was interface def instead of function value (CJP)\nconst defaultUseCombinedRefs = useCombinedRefs;\nexport default defaultUseCombinedRefs;\n", "export const isMaybeBrowser = () => typeof window != 'undefined';\n// @ts-ignore\nexport const isMaybeServer = () => typeof global != 'undefined';\n\nconst getEnvPlayerVersion = () => {\n  try {\n    // @ts-ignore\n    return PLAYER_VERSION as string;\n  } catch {}\n  return 'UNKNOWN';\n};\n\nconst player_version: string = getEnvPlayerVersion();\n\nexport const getPlayerVersion = () => player_version;\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAoD,iBAUvCC,EAAmC,IAAIC,IAAS,CAC3D,IAAMC,KAAY,UAAO,IAAI,EAE7B,sBAAU,IAAM,CACdD,EAAK,QAASE,GAAQ,CAChB,CAACA,IAED,OAAOA,GAAQ,WACjBA,EAAID,EAAU,OAAO,EAErBC,EAAI,QAAUD,EAAU,QAE5B,CAAC,CACH,EAAG,CAACD,CAAI,CAAC,EAEFC,CACT,EDzBA,IAAAE,EAAmD,oBACnDC,EAAsB,yBACtBC,EAQO,8BEPP,IAAMC,EAAsB,IAAM,CAChC,GAAI,CAEF,MAAO,OACT,MAAE,CAAO,CACT,MAAO,SACT,EAEMC,EAAyBD,EAAoB,EAEtCE,EAAmB,IAAMD,EFOtC,IAAME,EAAwBC,EAAiB,EACzCC,EAAqB,kBAErBC,EAAW,EAAAC,QAAM,WAAyD,CAACC,EAAOC,IAAQ,CAxBhG,IAAAC,EAyBE,GAAM,CACJ,OAAAC,EACA,MAAAC,EACA,uBAAAC,EACA,WAAAC,EACA,eAAAC,EACA,KAAAC,EACA,WAAAC,EACA,UAAAC,EACA,IAAKC,EACL,SAAAC,EACA,SAAAC,EACA,QAAAC,KACGC,CACL,EAAIf,EAEE,CAACgB,CAAc,KAAI,eAAS,0BAAuB,CAAC,EACpD,CAACC,EAAKC,CAAM,KAAI,aAA+BhB,KAAA,iBAAcI,CAAU,IAAxB,KAAAJ,EAA6BS,CAAQ,EACpFQ,KAAkB,UAAiC,MAAS,EAC5DC,KAAkB,UAAyB,IAAI,EAC/CC,EAAaC,EAAgBF,EAAiBnB,CAAG,EAEvD,sBAAU,IAAM,CA/ClB,IAAAC,EAgDIgB,GAAOhB,KAAA,iBAAcI,CAAU,IAAxB,KAAAJ,EAA6BS,CAAQ,CAC9C,EAAG,CAACA,EAAUL,CAAU,CAAC,KAEzB,aAAU,IAAM,CACd,IAAMiB,EAAiB,CACrB,GAAGvB,EACH,IAAAiB,EACA,eAAAD,EACA,mBAAAnB,EACA,sBAAAF,EACA,SAAUkB,CACZ,EACIQ,EAAW,UACbF,EAAgB,WAAU,cAAWI,EAAgBF,EAAW,QAASF,EAAgB,OAAO,EAEpG,EAAG,CAACF,CAAG,CAAC,KAER,aAAU,IAAM,CAjElB,IAAAf,GAkEIA,EAAAiB,EAAgB,UAAhB,MAAAjB,EAAyB,YAAYW,EACvC,EAAG,CAACA,CAAQ,CAAC,KAEb,aAAU,IAAM,CArElB,IAAAX,GAsEIA,EAAAiB,EAAgB,UAAhB,MAAAjB,EAAyB,WAAWY,EACtC,EAAG,CAACA,CAAO,CAAC,EAIV,EAAAf,QAAA,cAAC,SAAM,IAAKsB,EAAuC,GAAGN,GACnDH,CACH,CAEJ,CAAC,EAEDd,EAAS,UAAY,CACnB,OAAQ,EAAA0B,QAAU,OAClB,MAAO,EAAAA,QAAU,KACjB,eAAgB,EAAAA,QAAU,KAG1B,SAAU,EAAAA,QAAU,IACpB,uBAAwB,EAAAA,QAAU,OAClC,WAAY,EAAAA,QAAU,OACtB,eAAgB,EAAAA,QAAU,OAC1B,eAAgB,EAAAA,QAAU,MAAM,OAAO,OAAO,eAAa,CAAC,EAC5D,KAAM,EAAAA,QAAU,MAAM,eAAa,EACnC,WAAY,EAAAA,QAAU,MAAM,OAAO,OAAO,aAAW,CAAC,EACtD,UAAW,EAAAA,QAAU,MACvB,EAEA,IAAOC,EAAQ3B",
  "names": ["src_exports", "__export", "src_default", "__toCommonJS", "import_react", "useCombinedRefs", "refs", "targetRef", "ref", "import_react", "import_prop_types", "import_playback_core", "getEnvPlayerVersion", "player_version", "getPlayerVersion", "playerSoftwareVersion", "getPlayerVersion", "playerSoftwareName", "MuxAudio", "React", "props", "ref", "_a", "envKey", "debug", "beaconCollectionDomain", "playbackId", "preferPlayback", "type", "streamType", "startTime", "outerSrc", "children", "autoPlay", "preload", "restProps", "playerInitTime", "src", "setSrc", "playbackCoreRef", "innerMediaElRef", "mediaElRef", "useCombinedRefs", "propsWithState", "PropTypes", "src_default"]
}
